{"ast":null,"code":"import axios from \"axios\";\nimport { userActions } from \"./user-slice\";\nexport const signUp = user => async dispatch => {\n  try {\n    //Sending the request\n    dispatch(userActions.signupRequest());\n    //Getting the data from backend\n    const {\n      data\n    } = await axios.post(\"/api/v1/eats/users/signup\", user);\n\n    // Set the data into state by using dispatch\n    dispatch(userActions.signupDetails({\n      user: data.user\n    }));\n  } catch (error) {\n    //if any error is there it will throw the error\n    dispatch(userActions.Errors({\n      errors: error.response.data.error\n    }));\n  }\n};\nexport const Login = user => async dispatch => {\n  try {\n    //Sending the request\n    dispatch(userActions.loginRequest());\n    //Getting the data from backend\n    const {\n      data\n    } = await axios.post(\"/api/v1/eats/users/login\", user);\n    // Set the data into state by using dispatch\n    dispatch(userActions.loginDetails({\n      user: data.user\n    }));\n  } catch (error) {\n    //if any error is there it will throw the error\n    dispatch(userActions.Errors({\n      errors: error.response.data.error\n    }));\n  }\n};\nexport const Logout = () => async dispatch => {\n  try {\n    dispatch(userActions.loginRequest());\n    await axios.get(\"/api/v1/eats/users/logout\");\n    dispatch(userActions.logOut({\n      user: null\n    }));\n  } catch (error) {\n    dispatch(userActions.Errors({\n      errors: error.response.data.error\n    }));\n  }\n};\nexport const currentUser = () => async dispatch => {\n  try {\n    dispatch(userActions.currentUserRequest());\n    const {\n      data\n    } = await axios.get(\"/api/v1/eats/users/me\");\n    console.log(data);\n    dispatch(userActions.currentUser({\n      user: data.user\n    }));\n  } catch (error) {}\n};","map":{"version":3,"names":["axios","userActions","signUp","user","dispatch","signupRequest","data","post","signupDetails","error","Errors","errors","response","Login","loginRequest","loginDetails","Logout","get","logOut","currentUser","currentUserRequest","console","log"],"sources":["C:/Users/emertxe/Desktop/MERN_ORDERIT/MERN-FoodOrder/Frontend/src/store/user/user-action.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { userActions } from \"./user-slice\";\r\n\r\nexport const signUp = (user) => async (dispatch) => {\r\n  try {\r\n    //Sending the request\r\n    dispatch(userActions.signupRequest());\r\n    //Getting the data from backend\r\n    const { data } = await axios.post(\"/api/v1/eats/users/signup\", user);\r\n\r\n    // Set the data into state by using dispatch\r\n    dispatch(\r\n      userActions.signupDetails({\r\n        user: data.user,\r\n      })\r\n    );\r\n  } catch (error) {\r\n    //if any error is there it will throw the error\r\n    dispatch(\r\n      userActions.Errors({\r\n        errors: error.response.data.error,\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const Login = (user) => async (dispatch) => {\r\n  try {\r\n    //Sending the request\r\n    dispatch(userActions.loginRequest());\r\n    //Getting the data from backend\r\n    const { data } = await axios.post(\"/api/v1/eats/users/login\", user);\r\n    // Set the data into state by using dispatch\r\n    dispatch(\r\n      userActions.loginDetails({\r\n        user: data.user,\r\n      })\r\n    );\r\n  } catch (error) {\r\n    //if any error is there it will throw the error\r\n    dispatch(\r\n      userActions.Errors({\r\n        errors: error.response.data.error,\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const Logout = () => async (dispatch) => {\r\n  try {\r\n    dispatch(userActions.loginRequest());\r\n    await axios.get(\"/api/v1/eats/users/logout\");\r\n\r\n    dispatch(\r\n      userActions.logOut({\r\n        user: null,\r\n      })\r\n    );\r\n  } catch (error) {\r\n    dispatch(\r\n      userActions.Errors({\r\n        errors: error.response.data.error,\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const currentUser = () => async (dispatch) => {\r\n  try {\r\n    dispatch(userActions.currentUserRequest());\r\n    const { data } = await axios.get(\"/api/v1/eats/users/me\");\r\n    console.log(data);\r\n    dispatch(\r\n      userActions.currentUser({\r\n        user: data.user,\r\n      })\r\n    );\r\n  } catch (error) {}\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,cAAc;AAE1C,OAAO,MAAMC,MAAM,GAAIC,IAAI,IAAK,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACF;IACAA,QAAQ,CAACH,WAAW,CAACI,aAAa,CAAC,CAAC,CAAC;IACrC;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,2BAA2B,EAAEJ,IAAI,CAAC;;IAEpE;IACAC,QAAQ,CACNH,WAAW,CAACO,aAAa,CAAC;MACxBL,IAAI,EAAEG,IAAI,CAACH;IACb,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd;IACAL,QAAQ,CACNH,WAAW,CAACS,MAAM,CAAC;MACjBC,MAAM,EAAEF,KAAK,CAACG,QAAQ,CAACN,IAAI,CAACG;IAC9B,CAAC,CACH,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMI,KAAK,GAAIV,IAAI,IAAK,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACF;IACAA,QAAQ,CAACH,WAAW,CAACa,YAAY,CAAC,CAAC,CAAC;IACpC;IACA,MAAM;MAAER;IAAK,CAAC,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,0BAA0B,EAAEJ,IAAI,CAAC;IACnE;IACAC,QAAQ,CACNH,WAAW,CAACc,YAAY,CAAC;MACvBZ,IAAI,EAAEG,IAAI,CAACH;IACb,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd;IACAL,QAAQ,CACNH,WAAW,CAACS,MAAM,CAAC;MACjBC,MAAM,EAAEF,KAAK,CAACG,QAAQ,CAACN,IAAI,CAACG;IAC9B,CAAC,CACH,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMO,MAAM,GAAGA,CAAA,KAAM,MAAOZ,QAAQ,IAAK;EAC9C,IAAI;IACFA,QAAQ,CAACH,WAAW,CAACa,YAAY,CAAC,CAAC,CAAC;IACpC,MAAMd,KAAK,CAACiB,GAAG,CAAC,2BAA2B,CAAC;IAE5Cb,QAAQ,CACNH,WAAW,CAACiB,MAAM,CAAC;MACjBf,IAAI,EAAE;IACR,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdL,QAAQ,CACNH,WAAW,CAACS,MAAM,CAAC;MACjBC,MAAM,EAAEF,KAAK,CAACG,QAAQ,CAACN,IAAI,CAACG;IAC9B,CAAC,CACH,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAGA,CAAA,KAAM,MAAOf,QAAQ,IAAK;EACnD,IAAI;IACFA,QAAQ,CAACH,WAAW,CAACmB,kBAAkB,CAAC,CAAC,CAAC;IAC1C,MAAM;MAAEd;IAAK,CAAC,GAAG,MAAMN,KAAK,CAACiB,GAAG,CAAC,uBAAuB,CAAC;IACzDI,OAAO,CAACC,GAAG,CAAChB,IAAI,CAAC;IACjBF,QAAQ,CACNH,WAAW,CAACkB,WAAW,CAAC;MACtBhB,IAAI,EAAEG,IAAI,CAACH;IACb,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE,CAAC;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}